// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const queryAddUser = `-- name: QueryAddUser :exec
INSERT INTO  user_details (email,user_password,created,updated) values ($1,$2,$3,$4)
`

type QueryAddUserParams struct {
	Email        string         `json:"email"`
	UserPassword sql.NullString `json:"user_password"`
	Created      sql.NullTime   `json:"created"`
	Updated      sql.NullTime   `json:"updated"`
}

func (q *Queries) QueryAddUser(ctx context.Context, arg QueryAddUserParams) error {
	_, err := q.exec(ctx, q.queryAddUserStmt, queryAddUser,
		arg.Email,
		arg.UserPassword,
		arg.Created,
		arg.Updated,
	)
	return err
}

const queryCheckUserByEmail = `-- name: QueryCheckUserByEmail :one
SELECT id, email, user_password, created, updated, deleted from user_details WHERE email=$1
`

func (q *Queries) QueryCheckUserByEmail(ctx context.Context, email string) (UserDetail, error) {
	row := q.queryRow(ctx, q.queryCheckUserByEmailStmt, queryCheckUserByEmail, email)
	var i UserDetail
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserPassword,
		&i.Created,
		&i.Updated,
		&i.Deleted,
	)
	return i, err
}

const queryGetAlluser = `-- name: QueryGetAlluser :many
SELECT id, email, user_password, created, updated, deleted FROM user_details
`

func (q *Queries) QueryGetAlluser(ctx context.Context) ([]UserDetail, error) {
	rows, err := q.query(ctx, q.queryGetAlluserStmt, queryGetAlluser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserDetail{}
	for rows.Next() {
		var i UserDetail
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.UserPassword,
			&i.Created,
			&i.Updated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryGetUserById = `-- name: QueryGetUserById :one
SELECT id, email, user_password, created, updated, deleted from user_details WHERE id=$1
`

func (q *Queries) QueryGetUserById(ctx context.Context, id int32) (UserDetail, error) {
	row := q.queryRow(ctx, q.queryGetUserByIdStmt, queryGetUserById, id)
	var i UserDetail
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserPassword,
		&i.Created,
		&i.Updated,
		&i.Deleted,
	)
	return i, err
}
